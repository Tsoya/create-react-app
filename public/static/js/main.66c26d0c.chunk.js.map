{"version":3,"sources":["Components/fetchData.js","App.js","serviceWorker.js","index.js"],"names":["Fetch","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","timezone","isLoaded","error","sunrise","sunset","temperature","isFar","tempforweek","onClick","bind","assertThisInitialized","onClick1","_this2","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","long","longitude","console","log","fetch","then","res","json","setState","currently","Date","daily","data","sunriseTime","sunsetTime","allWeeks","i","push","react_default","a","createElement","className","key","time","toString","summary","temperatureLow","Math","floor","windSpeed","windGust","createWeekOverview","Component","App","fetchData","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66c26d0c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './styles.css';\r\n\r\nclass Fetch extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items: [],\r\n            timezone: '',\r\n            isLoaded: false,\r\n            error: null,\r\n            sunrise: '',\r\n            sunset: '',\r\n            temperature: '',\r\n            isFar: false,\r\n            tempforweek: ''\r\n        }\r\n\r\n        this.onClick = this.onClick.bind(this);\r\n        this.onClick1 = this.onClick1.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n            const lat = position.coords.latitude;\r\n            const long = position.coords.longitude;\r\n            console.log(position)\r\n\r\n\r\n            fetch('https://cors.io/?https://api.darksky.net/forecast/7cb29df97dd4e2a6850670bf6dc173b6/' + lat + ',' + long)\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    console.log(res)\r\n                    this.setState({\r\n                        items: res.currently,\r\n                        timezone: res.timezone,\r\n                        sunrise: new Date(res.daily.data[0].sunriseTime * 1000),\r\n                        sunset: new Date(res.daily.data[0].sunsetTime * 1000),\r\n                        isLoaded: true,\r\n                        temperature: res.currently.temperature,\r\n                        tempforweek: res.daily.data,\r\n                        isFar: true\r\n\r\n                    })\r\n\r\n                })\r\n        })\r\n\r\n\r\n    }\r\n\r\n    onClick() {\r\n        this.setState({\r\n            isFar: false\r\n        })\r\n\r\n    }\r\n\r\n    onClick1() {\r\n        this.setState({\r\n            isFar: true\r\n        })\r\n    }\r\n\r\n    createWeekOverview() {\r\n        let allWeeks = []\r\n        for (let i = 1; i < 6; i++) {\r\n        \r\n            allWeeks.push (\r\n            <div className=\"overview\" key={i}>\r\n                <h2>{new Date(this.state.tempforweek[i].time * 1000).toString()} </h2>\r\n                <h3>Short overview</h3>\r\n                <p>{this.state.tempforweek[i].summary} </p>\r\n\r\n                {(this.state.isFar) ? (\r\n                    <p>Temperature: {this.state.tempforweek[i].temperatureLow} Farenheit</p>\r\n                ) : (\r\n                        <p>Temperature: {Math.floor((this.state.tempforweek[i].temperatureLow - 32) / 1.8)} Celcius</p>\r\n                    )}\r\n            </div>\r\n            )\r\n        }\r\n        return allWeeks;\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n\r\n            (this.state.isLoaded) ? (\r\n                <div>\r\n                    <div className=\"todaysWeather\">\r\n                        <h2>Weather for: {this.state.timezone}</h2>\r\n                        <button onClick={this.onClick}>Celcius</button>\r\n                        <button onClick={this.onClick1}>Farenheit</button>\r\n                        <h3>Todays weather</h3>\r\n\r\n                        {(this.state.isFar) ? (\r\n                            <p>Temperature: {this.state.temperature} Farenheit</p>\r\n                        ) : (\r\n                                <p>Temperature: {Math.floor((this.state.temperature - 32) / 1.8)} Celcius</p>\r\n                            )}\r\n\r\n\r\n                        <p>Wind Speed: {this.state.items.windSpeed} MPH</p>\r\n                        <p>Wind Gust: {this.state.items.windGust} MPH</p>\r\n                        <p>Sunrise: {this.state.sunrise.toString()} </p>\r\n                        <p>Sunset: {this.state.sunset.toString()} </p>\r\n\r\n                    </div>\r\n\r\n\r\n\r\n\r\n                    <div className=\"weekoverview\">\r\n\r\n                        {this.createWeekOverview()}\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            ) : (\r\n                    <div className=\"loading\">\r\n                        <p>Loading weather for your location ...</p>\r\n                    </div>\r\n                )\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Fetch;\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Fetch from './Components/fetchData';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <p></p>\n\n        <Fetch/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}